4)Practice 4:  

Write a PL/SQL block that accepts values of two non-zero integer numbers from user. The block performs the following operation 
( first_number/second_number + second_number). The result of the operation should be stored in a PL/SQL variable and also displayed on the screen.
								



declare
i number := &num1;
j number := &num2;

operation number;

begin

operation:=(i/j)+j;

dbms_output.put_line('addition of number is' || operation);

end;
/

============================================================================================================================================================

5)Practice 5:

Declare two SQL* plus variables named MAX_SALARY and MIN_SALARY that are of data type NUMBER.
Write a PL/SQL block that accepts department_id value from a user, selects the maximum salary and minimum salary paid in the department, from the EMPLOYEES table and stores the corresponding values in MAX_SALARY and MIN_SALARY respectively. 
Use appropriate SQL * plus command to see the modified values of MAX_SALARY and MIN_SALARY
								

declare

max_salary number;
min_salary number;

v_deptno number := &dno;

begin

select max(sal),min(sal) into max_salary,min_salary from emp where deptno=v_deptno;

dbms_output.put_line('min salary is= ' || min_salary);
dbms_output.put_line('max salary is= ' || max_salary);
 
end;
/


============================================================================================================================================================

6)Practice 6:

Write a PL/SQL block that accepts job_id value from a user, calculates the average salary paid for that job. The code should display the job and the average salary for that job.

declare
 v_job varchar2(20) := '&jid';
 v_sal number;

begin
select avg(sal) into v_sal from emp where job=v_job;
dbms_output.put_line('job id= ' || v_job || 'avg salary = '|| v_sal);

end;
/

============================================================================================================================================================

7)Practice 7: 

Write a PL/SQL block that accepts employee_id from a user and retrieves the salary for the employee from the EMPLOYEES table. It determines the salary class as per the following criteria and displays the salary and salary class on the screen
Criteria for deciding salary class: 
•If the salary is less than 2500, then it comes under the class ‘LOW’
•If the salary is greater than or equal to 2500 and less than 5000, then it comes under class ‘MEDIUM’.
•If the salary is greater than or equal to 5000, then it comes under class ‘HIGH’

declare
v_empid number := &eno;
v_sal number;

begin
select sal into v_sal from emp where empno = v_empid;
if v_sal<2500 then
dbms_output.put_line('salary is low');

elsif v_sal>=2500 and v_sal<5000 then
dbms_output.put_line('salary is medium');

else
dbms_output.put_line('salary is high');

end if;
end;
/

============================================================================================================================================================


8)Practice 8:

Write a PL/SQL block that accepts an integer value between 1 and 12 from a user and displays the name of the corresponding month. If the number input is not in the range +1 to +12 then the block should display the message “Invalid Month” on the screen

declare
a number := &m;
begin

case a
when 1 then
dbms_output.put_line('JANUARY');

when 2 then
dbms_output.put_line('FEBRUARY');

when 3 then
dbms_output.put_line('MARCH');

when 4 then
dbms_output.put_line('APRIL');

when 5 then
dbms_output.put_line('MAY');

when 6 then
dbms_output.put_line('JUNE');

when 7 then
dbms_output.put_line('JULY');

when 8 then
dbms_output.put_line('AUGUST');

when 9 then
dbms_output.put_line('SEPTEMBER');

when 10 then
dbms_output.put_line('OCTOBER');

when 11 then
dbms_output.put_line('NOVEMBER');

when 12 then
dbms_output.put_line('DECEMBER');

else
dbms_output.put_line('INVALID MONTH');

end case;
end;
/




8)
declare
n number := &m;
begin

if n=1 then
dbms_output.put_line('JANUARY');

elsif  n=2 then
dbms_output.put_line('FEBRUARY');

elsif  n=3 then
dbms_output.put_line('MARCH');

elsif  n=4 then
dbms_output.put_line('APRIL');

elsif  n=5 then
dbms_output.put_line('MAY');

elsif  n=6 then
dbms_output.put_line('JUNE');

elsif  n=7 then
dbms_output.put_line('JULY');

elsif  n=8 then
dbms_output.put_line('AUGUST');

elsif  n=9 then
dbms_output.put_line('SEPTEMBER');

elsif  n=10 then
dbms_output.put_line('OCTOBER');

elsif  n=11 then
dbms_output.put_line('NOVEMBER');

elsif  n=12 then
dbms_output.put_line('DECEMBER');

else
dbms_output.put_line('INVALID MONTH');

end if;
end;
/


============================================================================================================================================================

9)Practice 9: 

Write a PL/SQL block that accepts a positive integer number from a user and displays its factorial on the screen

declare
n number:=&num;
i number;
fact number:=1;
begin
for i in 1..n
loop
fact:=fact*i;
end loop;
dbms_output.put_line('factorial of no is = ' || fact);
end;
/

============================================================================================================================================================



